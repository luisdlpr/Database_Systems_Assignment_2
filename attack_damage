#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Luis Vicente Reyes z5206766
Written on: 100423
Attack Damage

Given the name of an attacking, and a defending pokemon along with the name of a game in the Pokemon series,
display a list, ordered from lowest to highest damage,
of all the moves the attacking pokemon could use on the defending pokemon in the given game.
"""

### Imports
import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Attacking Pokemon Name> <Defending Pokemon Name> <Pokemon Game Name>"


### Globals
db = None
Attacking_Pokemon_Name = None
Defending_Pokemon_Name = None
Pokemon_Game_Name      = None


### Command-line args
if len(sys.argv) != 4:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Attacking_Pokemon_Name = helpers.clean(sys.argv[1])
Defending_Pokemon_Name = helpers.clean(sys.argv[2])
Pokemon_Game_Name      = helpers.clean(sys.argv[3])

"""
Check a pokemon (given by name) exists in the database, and return required
statistics for the main query. Error if not found.
"""
def check_and_process_poke(name, cursor):
    poke_query = """
        SELECT p.id, p.name, p.first_type, p.second_type, p.base_stats
        FROM Pokemon AS p
        WHERE name = %s;
    """

    cursor.execute(poke_query, (name, ))
    result = cursor.fetchall()

    if len(result) < 1:
        print(f"'{name}' isn't a Pokemon that exists.", file=sys.stderr)
        sys.exit(1)
    else:
        result = result[0]
        result_stats = result[4]
        result_stats = result_stats[1:-1].split(',')
        result_stats = {
            'hp': result_stats[0],
            'atk': result_stats[1],
            'dfn': result_stats[2],
            'spatk': result_stats[3],
            'spdfn': result_stats[4],
            'spd': result_stats[5],
        }
        return result, result_stats

"""
Check a pokemon (given by name) exists in the game (given by name) and error
if not.
"""
def check_poke_in_game(game_name, poke_name, cursor):
    check_poke_in_game_query = """
    SELECT Game
    FROM Pokedex
    WHERE Game = (
        SELECT id
        FROM Games
        WHERE name = %s
    ) and National_ID = (
        SELECT id
        FROM Pokemon
        WHERE name = %s
    );
    """

    cursor.execute(check_poke_in_game_query, (game_name, poke_name))
    if cursor.fetchone() is None:
        print(f"'{poke_name}' doesn't appear in 'Pokemon {Pokemon_Game_Name}'.", file=sys.stderr)
        sys.exit(1)        
    return

def main():
    # init cursor in context manager.
    if db is None:
        print('DB not found', file=sys.stderr)
        sys.exit(1)

    with db.cursor() as cur:

        # check if attacker and defenders exist in DB and retrieve stats.
        atker, atker_stats = check_and_process_poke(Attacking_Pokemon_Name, cur)
        dfnder, dfnder_stats = check_and_process_poke(Defending_Pokemon_Name, cur)

        # check game exists in DB.
        check_game_query = "SELECT id FROM Games WHERE name = %s;"
        cur.execute(check_game_query, (Pokemon_Game_Name, ))
        if cur.fetchone() is None:
            print(f"'Pokemon {Pokemon_Game_Name}' isn't a game in the Pokemon series.", file=sys.stderr)
            sys.exit(1)        

        # check pokemon exist in game.
        check_poke_in_game(Pokemon_Game_Name, Attacking_Pokemon_Name, cur)
        check_poke_in_game(Pokemon_Game_Name, Defending_Pokemon_Name, cur)

        # query usable moves and calculate using formula (find plpgsql function in helpers.sql).
        poke_constant_stats = (
            atker_stats['atk'],
            atker_stats['spatk'],
            dfnder_stats['dfn'],
            dfnder_stats['spdfn'],
            atker[2],
            atker[3],
            dfnder[2],
            dfnder[3],
        )

        attacks_query = """
            SELECT DISTINCT * FROM
            (
                SELECT
                m.id, 
                m.name, 
                damage_calc_formula(1, m.power, %s, %s, %s, %s, 0.85, %s, %s, %s, %s, m.of_type, m.category) AS dmin,
                damage_calc_formula(100, m.power, %s, %s, %s, %s, 1.00, %s, %s, %s, %s, m.of_type, m.category) AS dmax
                FROM Moves AS m
                INNER JOIN (
                    SELECT learnt_by, learnt_in, learns
                    FROM Learnable_moves
                    WHERE learnt_by = (
                        SELECT id FROM Pokemon WHERE name = %s 
                    ) AND learnt_in = (
                        SELECT id FROM Games WHERE name = %s
                    )
                ) AS lm ON m.id = lm.learns
                WHERE m.power is not Null 
                    AND m.category != 'Status'
            ) AS q
            WHERE q.dmax != 0
            ORDER BY q.dmax, q.dmin, q.name;
        """
        cur.execute(attacks_query, 
            poke_constant_stats + poke_constant_stats + (Attacking_Pokemon_Name, Pokemon_Game_Name)
        )

        moves = cur.fetchall()

    # if no usable moves
    if len(moves) < 1:
        output_string = f"In 'Pokemon {Pokemon_Game_Name}', '{Attacking_Pokemon_Name}' can't attack '{Defending_Pokemon_Name}'."
        print(output_string)
        sys.exit(0)

    # otherwise print moves
    output_string = f"In 'Pokemon {Pokemon_Game_Name}', When '{Attacking_Pokemon_Name}' attacks '{Defending_Pokemon_Name}',"
    output_string += f"'{Attacking_Pokemon_Name}' can use the following moves:\n\n"

    for r in moves:
        output_string += f"\t'{r[1]}' for a minimum of {r[2]} damage and a maximum of {r[3]} damage to '{Defending_Pokemon_Name}'.\n"

    print(output_string)
    sys.exit(0)


if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
