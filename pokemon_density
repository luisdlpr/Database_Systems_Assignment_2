#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Luis Vicente Reyes z5206766
Written on: 100423

Pokemon Density

Find the density of pokemon in each location within a given region.

"""


### Imports
import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Region>"


### Globals
db = None
Region = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Region = helpers.clean(sys.argv[1])


def main():
    with db.cursor() as cur:
        # check region given is valid.
        check_valid_region_query = "SELECT region FROM Games where region = %s;"
        try:
            cur.execute(check_valid_region_query, (Region, ))
        except psycopg2.errors.lookup("22P02"):
            print(f"'{Region}' isn't a region in the Pokemon series.", file=sys.stderr)
            sys.exit(1)

        # get the average density of each location in the region.
        average_density_query = """
        SELECT sums.name, sum(sums.tsum_density)/count(sums.tsum_density) as average_density
        FROM (
            SELECT sd.tsum_density, l.name, region
            FROM Locations_in_region as l
            LEFT JOIN (
                SELECT location_id, sum(sum_density) as tsum_density
                FROM sum_density_by_location
                GROUP BY location_id
            ) AS sd on sd.location_id = l.id
            WHERE region = %s
        ) as sums GROUP BY sums.name
        ORDER BY average_density DESC, name ASC
        """
        cur.execute(average_density_query, (Region,))
        data = (cur.fetchall())

    # format the output. 
    output_string = f"""
    The average density of Pokemon within each location in the '{Region}' region: \n
    """
    counter = 0
    # find where non zero densities start and append to output.
    for row in data:
        if row[1] is None:
            counter +=1
        else:
            rounded_value = round(float(row[1]), 4)
            output_string += f"\t{row[0]}:{rounded_value:.4f}\n"

    # if all rows are non-zero print the output.
    if counter >= len(data):
        print(output_string)
        sys.exit(0)

    # otherwise add no encounter locations to output string.
    output_string += f"The following locations in the '{Region}' region have no wild Pokemon encounters: \n"
    for index in range(counter):
        output_string += f"\t{data[index][0]}\n"

    # print output and exit
    print(output_string)
    sys.exit(0)

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
