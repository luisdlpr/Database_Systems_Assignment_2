#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Pokemon Density

Find the density of pokemon in each location within a given region.

TO ASK:
    is looping through locations bad design for this question
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Region>"


### Globals
db = None
Region = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Region = helpers.clean(sys.argv[1])


def main():
    # print name of location and average density of poke in location
    # sort by density then location_name
    # account for no pokemon
    # convert from kd to g/cm
    # x scale density by rarity
    # round to 4 dp
    with db.cursor() as cur:
        # region_query = """
        # SELECT l.name, l.id, g.region
        # FROM Locations as l
        # INNER JOIN (
        #     SELECT id, name, region
        #     FROM Games
        #     WHERE Region = %s
        # ) AS g ON l.appears_in = g.id
        # """
        # cur.execute(region_query, (Region, ))
        # locations_in_region = cur.fetchall()

        # for loc in locations_in_region:
        #     location_query = """

        #     """

        # pokemon average density join with encounters for location id
        # only encounters where location id is in locations by region
        # average_density_query = """
        # SELECT DISTINCT l.name, d.average_density
        # FROM Locations_in_region AS l
        # LEFT JOIN (
        #     SELECT *
        #     FROM average_density_by_location_id
        # ) AS d ON d.location_id = l.id
        # WHERE l.region = %s
        # ORDER BY d.average_density DESC, l.name ASC
        # """
        # average_density_query = """
        # SELECT l.id sum(tsd.tsum_density)/count(tsd.tsum_density) FROM (
        # SELECT l.id, sum(sd.sum_density) as tsum_density
        # FROM sum_density_by_location AS sd
        # RIGHT JOIN (
        #     SELECT * 
        #     FROM locations_in_region 
        #     WHERE region = %s
        # ) AS l ON l.id = sd.location_id
        # GROUP BY l.id )
        # GROUP BY l.name
        # """
        check_valid_region_query = "SELECT region FROM Games where region = %s;"
        try:
            cur.execute(check_valid_region_query, (Region, ))
        except psycopg2.errors.lookup("22P02"):
            print(f"'{Region}' isn't a region in the Pokemon series.", file=sys.stderr)
            sys.exit(1)

        average_density_query = """
        SELECT sums.name, sum(sums.tsum_density)/count(sums.tsum_density) as average_density
        FROM (
            SELECT sd.tsum_density, l.name, region
            FROM Locations_in_region as l
            LEFT JOIN (
                SELECT location_id, sum(sum_density) as tsum_density
                FROM sum_density_by_location
                GROUP BY location_id
            ) AS sd on sd.location_id = l.id
            WHERE region = %s
        ) as sums GROUP BY sums.name
        ORDER BY average_density DESC, name ASC
        """
        cur.execute(average_density_query, (Region,))
        data = (cur.fetchall())

    output_string = f"""
    The average density of Pokemon within each location in the '{Region}' region: \n
    """
    counter = 0
    for row in data:
        if row[1] is None:
            counter +=1
        else:
            rounded_value = round(float(row[1]), 4)
            output_string += f"\t{row[0]}:{rounded_value:.4f}\n"

    if counter >= len(data):
        print(output_string)
        return

    output_string += f"The following locations in the '{Region}' region have no wild Pokemon encounters: \n"
    for index in range(counter):
        output_string += f"\t{data[index][0]}\n"

    print(output_string)
    return


        



if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
