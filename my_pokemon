#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Luis Vicente De La Paz Reyes z5206766
Written on: 050423

My Pokemon

Create your very own Pokemon

TO ASK:
    distinct moves??
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

def menu(items: list[str]) -> int:
    """
    Given a list of strings,
    print a numbered menu
    and return the user's selection.
    """
    padding = len(str(len(items)))
    print(f"Select an option from the menu below by entering its number:")
    for i, item in enumerate(items):
        print(f"{i+1:{padding}}) {item}")
    ret = int(input("> Selection: ")) - 1
    if not sys.stdin.isatty():
        print(f"{ret+1}")
    print()
    return ret


def main():
    # convert given seed to float
    float_seed = rng.random()

    # use context manager for cursor
    with db.cursor() as cur:

        # set psql seed to random
        query_set_seed = "SELECT setseed(%s);"
        cur.execute(query_set_seed, (float_seed, ))

        # present menu for game (rng 10)
        query_game_menu = """
        SELECT name, id
        FROM Games
        ORDER BY random()
        LIMIT 10;
        """
        cur.execute(query_game_menu)
        game_options = cur.fetchall()
        game_selected = game_options[menu([row[0] for row in game_options])]
        
        # present menu for pokemon in selected game (rng 10)
        query_pokemon_menu = """
        SELECT p.name, p.id, p.species, tf.name, ts.name, g.regional_id
        FROM Pokemon AS p
        INNER JOIN (
            SELECT national_id, game, regional_id
            FROM Pokedex
            WHERE game = %s
        ) AS g ON g.national_id = p.id
        LEFT JOIN (
            SELECT name, id
            FROM Types
        ) AS tf ON tf.id = p.first_type
        LEFT JOIN (
            SELECT name, id
            FROM Types
        ) AS ts ON ts.id = p.second_type
        ORDER BY random()
        LIMIT 10;
        """
        cur.execute(query_pokemon_menu, (game_selected[1], ))
        poke_options = cur.fetchall()
        poke_selected = poke_options[menu([row[0] for row in poke_options])]
        poke_id_split = poke_selected[1][1:-1].split(',')

        # present menu for abilities of selected pokemon (all)
        query_poke_ab_menu = """
        SELECT a.name, a.id
        FROM Abilities AS a
        INNER JOIN (
            SELECT n.knows, n.known_by
            FROM Knowable_Abilities as n
            WHERE (n.known_by).Pokedex_Number = %s 
                AND (n.known_by).Variation_Number = %s
        ) AS k ON a.id = k.knows
        ORDER BY a.id;
        """
        cur.execute(query_poke_ab_menu, (poke_id_split[0], poke_id_split[1]))
        ab_options = cur.fetchall()
        # if no abilities are found for the pokemon just set as none
        if len(ab_options) > 0:
            ab_selected = ab_options[menu([row[0] for row in ab_options])]
        else:
            ab_selected = [None]

        # present menu for pokemons moves (order by id)
        query_poke_moves_menu = """
        SELECT DISTINCT m.name, m.id, t.name, m.category, m.power, m.accuracy
        FROM Moves AS m
        INNER JOIN (
            SELECT Learnt_By, Learnt_In, Learnt_When, Learns
            FROM Learnable_Moves
            WHERE Learnt_When IN (
                SELECT r.id
                FROM Requirements AS r
                WHERE starts_with(r.Assertion, 'Level:')
            )
        ) AS l ON m.id = l.Learns 
        INNER JOIN (
            SELECT name, id
            FROM Types
        ) AS t ON t.id = m.Of_Type
        WHERE (l.Learnt_By).Pokedex_Number = %s
            AND (l.Learnt_By).Variation_Number = %s
            AND l.Learnt_In = %s
        ORDER BY m.id;
        """
        cur.execute(query_poke_moves_menu, (poke_id_split[0], poke_id_split[1], game_selected[1]))
        moves_options = cur.fetchall()

        # let the user select up to 4 moves
        moves_selected = []
        for _ in range(4):
            # if there are no more options just exit
            if len(moves_options) <= 0:
                break
            move_selected = menu([row[0] for row in moves_options])
            moves_selected.append(moves_options[move_selected])
            moves_options.pop(move_selected)

        # convert the typeids to a string of names
        types = [poke_selected[3], poke_selected[4]]
        type_string = "Type: "

        if types[1] is not None:
            type_string += f"{types[0]} + {types[1]} \n"
        else:
            type_string += f"{types[0]} \n"

        # format and input the collected data into output string
        output_string = f"""
              Here is your new Pokemon (from Pokemon {game_selected[0]}):

              Name: {poke_selected[0]}
              Species: {poke_selected[2]}
        """ + type_string
        
        output_string += f"""
              Pokedex Number: {poke_selected[5]} ({poke_id_split[0]})

              Ability: {ab_selected[0]}

              Moves:
        """
        for move in moves_selected:
            output_string += f"\t{move[0]}\t[{move[2]}]\t(Category: {move[3]}, Power: {move[4]}, Accuracy:{move[5]})\n"
        
        print(output_string)

    return

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
