#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Luis Vicente Reyes z5206766
Written on: 100423

Possible Evolutions

Given the name of a pokemon,
display a list of all the pokemon that could evolve into the given pokemon,
and a list of all the pokemon that the given pokemon could evolve into.
"""

### Imports
import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Pokemon Name>"


### Globals
db = None
Pokemon_Name = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Pokemon_Name = helpers.clean(sys.argv[1])

"""
Return the formatted output for a group of requirements
"""
def format_requirements(requirements):
    # set up a map for the requirements for ease of formatting
    ev_requirements_map = {}
    for req in requirements:
        update = ev_requirements_map.get(req[0], [])
        update.append(req)
        ev_requirements_map[req[0]] = update

    output_string = ""
    
    for evo in ev_requirements_map.keys():
        for requirement in ev_requirements_map[evo]:
            if requirement[4] is True:
                output_string += "\t\t\t\tNOT "
            else:
                output_string += "\t\t\t\t"
            output_string += f"{requirement[3]}\n\t\t\tAND\n"
        output_string = output_string[0:-7]
        output_string += "\t\tOR\n"
    output_string = output_string[0:-5]

    return output_string

"""
Query the pre or post evolutions of a pokemon (given its name)
"""
def query_evolutions(isPre, name, cursor):
    if isPre:
        search_param = 'pre_evolution'
        alt_param = 'post_evolution'
    else:
        search_param = 'post_evolution'
        alt_param = 'pre_evolution'

    generic_query = f"""
        SELECT pe.id, po.id as poke_id, po.name, re.assertion, er.inverted
        FROM Pokemon AS po
        INNER JOIN (
            SELECT e.id, e.{search_param}
            FROM Evolutions AS e
            INNER JOIN (
                SELECT id FROM Pokemon WHERE name = %s
            ) AS p ON p.id = e.{alt_param}
        ) AS pe ON pe.{search_param} = po.id
        JOIN (
            SELECT evolution, requirement, inverted
            FROM Evolution_Requirements
        ) AS er ON er.evolution = pe.id
        JOIN (
            SELECT id, assertion
            FROM Requirements
        ) AS re ON er.requirement = re.id;
    """

    cursor.execute(generic_query, (name, ))
    return cursor.fetchall()

"""
Given the output of a query, build the formatted output.
"""
def format_evolutions(s1, s2, ev_data):
    if len(ev_data) == 0:
        return s2
    ev_map = {}
    for ev in ev_data:
        update = ev_map.get(ev[1], [])
        update.append(ev)
        ev_map[ev[1]] = update

    output_string = s1
    for e in ev_map.keys():
        output_string += f"\t'{ev_map[e][0][2]}' when the following requirements are satisfied:\n"
        output_string += format_requirements(ev_map[e])
    return output_string


def main():
    with db.cursor() as cur:
        # check pokemon exists
        check_pokemon_query = """
        SELECT count(id)
        FROM Pokemon
        WHERE name = %s
        """
        cur.execute(check_pokemon_query, (Pokemon_Name, ))
        result = cur.fetchone()
        if result[0] == 0:
            print(f"'{Pokemon_Name}' isn't a Pokemon that exists.", file=sys.stderr)
            sys.exit(1)

        post_evs = query_evolutions(False, Pokemon_Name, cur)
        pre_evs = query_evolutions(True, Pokemon_Name, cur)

    # format the output string
    # pre evolutions
    output_string = format_evolutions(
        f"'{Pokemon_Name}' can evolve from:\n",
        f"'{Pokemon_Name}' doesn't have any pre-evolutions.\n\n",
        pre_evs
    )

    # post evolutions
    output_string += format_evolutions(
        f"'{Pokemon_Name}' can evolve into:\n", 
        f"'{Pokemon_Name}' doesn't have any post-evolutions.\n",
        post_evs
    )

    print(output_string)
    sys.exit(0)

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
